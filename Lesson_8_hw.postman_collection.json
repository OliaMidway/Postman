{
	"info": {
		"_postman_id": "0361b2e7-00a6-4c41-8aa8-a2bfe83e22f9",
		"name": "Lesson_8_hw",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login_hw",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token\r",
							"\r",
							"pm.environment.set(\"token\", user_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "23e3213r",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Alex",
							"disabled": true
						},
						{
							"key": "password",
							"value": "23e3213r",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let checkbody = \"This is the first responce from server!ss\"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(checkbody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"let name_check = \"Alexx\"\r",
							"let user_name = jsonData.name\r",
							"console.log(name_check)\r",
							"console.log(user_name)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(name_check);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"let age_check = '32'\r",
							"let user_age = jsonData.age\r",
							"console.log(age_check)\r",
							"console.log(user_age)\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(user_age).to.eql(age_check);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"let salary_check = 2000\r",
							"let user_salary = jsonData.salary\r",
							"console.log(salary_check)\r",
							"console.log(user_salary)\r",
							"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(user_salary).to.eql(salary_check);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let namereq_check = req.name\r",
							"console.log(namereq_check)\r",
							"\r",
							"pm.test(\"Your test name request\", function () {\r",
							"    pm.expect(namereq_check).to.eql(user_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let agereq_check = req.age\r",
							"console.log(agereq_check)\r",
							"\r",
							"pm.test(\"Your test age request\", function () {\r",
							"    pm.expect(agereq_check).to.eql(user_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let salaryreq_check = parseInt(req.salary)\r",
							"console.log(salaryreq_check)\r",
							"\r",
							"pm.test(\"Your test salary request\", function () {\r",
							"    pm.expect(salaryreq_check).to.eql(user_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family_check = jsonData.family\r",
							"console.log(family_check)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let salary_year_check = parseInt(req.salary) * 4\r",
							"let salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"console.log(salary_year_check)\r",
							"console.log(salary_1_5_year)\r",
							"\r",
							"pm.test(\"Your test salary_year request\", function () {\r",
							"    pm.expect(salary_year_check).to.eql(salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alexx",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name_check = req.name\r",
							"let user_name = jsonData.name\r",
							"console.log(name_check)\r",
							"console.log(user_name)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(name_check);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let age_check = req.age\r",
							"let user_age = jsonData.age\r",
							"console.log(age_check)\r",
							"console.log(user_age)\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(user_age).to.eql(age_check);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let salary_check = parseInt(req.salary)\r",
							"let user_salary = jsonData.salary\r",
							"console.log(salary_check)\r",
							"console.log(user_salary)\r",
							"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(user_salary).to.eql(salary_check);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family_check = jsonData.family\r",
							"console.log(family_check)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"let name_dog = jsonData.family.pets.dog\r",
							"console.log(name_dog)\r",
							"\r",
							"pm.test(\"Params_dog_name\", function () {\r",
							"    pm.expect(name_dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Params_dog_age\", function () {\r",
							"    pm.expect(name_dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"let name_check_dog = \"Luky\"\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"console.log(name_check_dog)\r",
							"console.log(dog_name)\r",
							"\r",
							"pm.test(\"Your test name_dog\", function () {\r",
							"    pm.expect(name_check_dog).to.eql(dog_name);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"let age_check_dog = 4\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"console.log(age_check_dog)\r",
							"console.log(dog_age)\r",
							"\r",
							"pm.test(\"Your test age_dog\", function () {\r",
							"    pm.expect(age_check_dog).to.eql(dog_age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mark",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "3",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "6000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Mark&age=3&salary=9000&token={{token}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mark"
						},
						{
							"key": "age",
							"value": "3"
						},
						{
							"key": "salary",
							"value": "9000"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name_check = req.name\r",
							"let user_name = jsonData.name\r",
							"console.log(name_check)\r",
							"console.log(user_name)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(name_check);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let age_check = parseInt(req.age)\r",
							"let user_age = jsonData.age\r",
							"console.log(age_check)\r",
							"console.log(user_age)\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(user_age).to.eql(age_check);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"let salary1 = parseInt(req.salary)\r",
							"console.log(salary1)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"let salary1_resp = jsonData.salary\r",
							"console.log(salary1_resp)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"let salary_resp_0 = jsonData.salary[0]\r",
							"console.log(salary_resp_0)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"let salary_resp_1 = jsonData.salary[1]\r",
							"console.log(salary_resp_1)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"let salary_resp_2 = jsonData.salary[2]\r",
							"console.log(salary_resp_2)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(salary1).to.eql(salary_resp_0);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let salary_str = parseInt(salary_resp_1)\r",
							"let salary_2 = salary1 * 2;\r",
							"console.log(salary_2)\r",
							"console.log(salary_str)\r",
							"\r",
							"pm.test(\"Your test salary 1\", function () {\r",
							"    pm.expect(salary_2).to.eql(salary_str);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let salary_str_2 = parseInt(salary_resp_2)\r",
							"let salary_3 = salary1 * 3;\r",
							"console.log(salary_3)\r",
							"console.log(salary_str_2)\r",
							"\r",
							"pm.test(\"Your test salary 2\", function () {\r",
							"    pm.expect(salary_3).to.eql(salary_str_2);\r",
							"});\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"name\", name_check);\r",
							"pm.environment.set(\"age\", age_check);\r",
							"pm.environment.set(\"salary\", salary1);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(let i = 0; i < salary1_resp.length; i++){\r",
							"    console.log(salary1_resp[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mark",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "3",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "6000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Aaron&age=41&salary=6000&token={{token}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Aaron"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "6000"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"salary_check_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"salary_check_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"salary_check_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"salary_check_after_3.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let salary_start = jsonData.start_qa_salary\r",
							"let salaryreq_check = parseInt(req.salary)\r",
							"console.log(salaryreq_check)\r",
							"console.log(salary_start)\r",
							"\r",
							"pm.test(\"Your test salary request\", function () {\r",
							"    pm.expect(salaryreq_check).to.eql(salary_start);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let salary_6month = jsonData.qa_salary_after_6_months\r",
							"let salaryreq_6month = parseInt(req.salary) * 2\r",
							"console.log(salary_6month)\r",
							"console.log(salaryreq_6month)\r",
							"\r",
							"pm.test(\"Your test salary 6month\", function () {\r",
							"    pm.expect(salaryreq_6month).to.eql(salary_6month);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let salary_12month = jsonData.qa_salary_after_12_months\r",
							"let salaryreq_12month = parseInt(req.salary) * 2.7\r",
							"console.log(salary_12month)\r",
							"console.log(salaryreq_12month)\r",
							"\r",
							"pm.test(\"Your test salary 12month\", function () {\r",
							"    pm.expect(salaryreq_12month).to.eql(salary_12month);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let salary_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"let salaryreq_year = parseInt(req.salary) * 3.3\r",
							"console.log(salary_year)\r",
							"console.log(salaryreq_year)\r",
							"\r",
							"pm.test(\"Your test salary year\", function () {\r",
							"    pm.expect(salaryreq_year).to.eql(salary_year);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"let salary_3year = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"let salaryreq_3year = parseInt(req.salary) * 3.8\r",
							"console.log(salary_3year)\r",
							"console.log(salaryreq_3year)\r",
							"\r",
							"pm.test(\"Your test salary 3year\", function () {\r",
							"    pm.expect(salaryreq_3year).to.eql(salary_3year);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"let u_name_salary = jsonData.person.u_name[1]\r",
							"console.log(u_name_salary)\r",
							"\r",
							"pm.test(\"Your test salary u_name\", function () {\r",
							"    pm.expect(salaryreq_check).to.eql(u_name_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"let age_user = jsonData.person.u_age\r",
							"let agecheck_user = parseInt(req.age)\r",
							"console.log(age_user)\r",
							"console.log(agecheck_user)\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(agecheck_user).to.eql(age_user);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"let salary_5years = jsonData.person.u_salary_5_years\r",
							"let salaryreq_5year = parseInt(req.salary) * 4.2\r",
							"console.log(salary_5years)\r",
							"console.log(salaryreq_5year)\r",
							"\r",
							"pm.test(\"Your test salary 5year\", function () {\r",
							"    pm.expect(salaryreq_5year).to.eql(salary_5years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let list_person = jsonData.person\r",
							"\r",
							"for (let prop in list_person) {\r",
							"    console.log(\"person.\" + prop + \" = \" + list_person[prop]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}